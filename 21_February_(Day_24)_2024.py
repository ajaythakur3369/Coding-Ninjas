'''
Task:- 
You have been given a string ‘S’. You need to return the lexicographically smallest subsequence of ‘S’ that contains all the distinct characters of ‘S’ exactly once. Return the string as mentioned above.
A string is a subsequence of a given string, that is generated by deleting some character of a given string without changing its order.

Example:
Let S = “ababc”. The lexicographically smallest subsequence containing all the distinct characters of strings is “abc”. 
'''

'''
Constraints:- 
 1 <= T <= 10
 1 <= N <= 1000
 Time Limit: 1sec
'''

'''
Sample Input 1:-
2
7
aababcb
5
bcabb

Sample Output 1:
abc
bca

Explanation For Sample Input 1:
Test case 1:
The lexicographically smallest subsequence contains all the distinct characters of strings is “abc”. 
Therefore the answer is “abc”.

Test case 2:
The lexicographically smallest subsequence contains all the distinct characters of strings is “bca”.
Therefore the answer is “bca”.
'''

'''
Sample Input 2:- 
2
7
gggjhhh
8
laughhgu

Sample Output 2:
gjh
laghu
'''

from os import *
from sys import *
from collections import *
from math import *

def smallestSubsequence( s, n):
    
    '''
    Write your code here.
    '''
    
    last_idx = [-1]*26 
    vis = [False]*26 
    stk = [] 
    for i in range(n) :
        last_idx[ord(s[i])-ord('a')] = i  
    for i in range(n) :
        if vis[ord(s[i])-ord('a')] == False :
            while len(stk)!=0 and stk[-1] > s[i] and last_idx[ord(stk[-1])-ord('a')] > i :
                vis[ord(stk.pop())-ord('a')] = False 
            stk.append(s[i]) 
            vis[ord(s[i])-ord('a')] = True  
    return ''.join(stk) 